// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ConnectionManagerState: Int {
  case none = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
  case disconnected = 4
}

/// Generated class from Pigeon that represents data sent in messages.
struct NetworkCallLogModel {
  var options: Options? = nil
  var request: Request? = nil
  var response: Response? = nil

  static func fromList(_ list: [Any?]) -> NetworkCallLogModel? {
    var options: Options? = nil
    if let optionsList: [Any?] = nilOrValue(list[0]) {
      options = Options.fromList(optionsList)
    }
    var request: Request? = nil
    if let requestList: [Any?] = nilOrValue(list[1]) {
      request = Request.fromList(requestList)
    }
    var response: Response? = nil
    if let responseList: [Any?] = nilOrValue(list[2]) {
      response = Response.fromList(responseList)
    }

    return NetworkCallLogModel(
      options: options,
      request: request,
      response: response
    )
  }
  func toList() -> [Any?] {
    return [
      options?.toList(),
      request?.toList(),
      response?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Options {
  var threadName: String? = nil
  var connectTimeoutMillis: Int64? = nil
  var readTimeoutMillis: Int64? = nil
  var writeTimeoutMillis: Int64? = nil
  var protocol: String? = nil
  var handshake: Handshake? = nil

  static func fromList(_ list: [Any?]) -> Options? {
    let threadName: String? = nilOrValue(list[0])
    let connectTimeoutMillis: Int64? = isNullish(list[1]) ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    let readTimeoutMillis: Int64? = isNullish(list[2]) ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let writeTimeoutMillis: Int64? = isNullish(list[3]) ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let protocol: String? = nilOrValue(list[4])
    var handshake: Handshake? = nil
    if let handshakeList: [Any?] = nilOrValue(list[5]) {
      handshake = Handshake.fromList(handshakeList)
    }

    return Options(
      threadName: threadName,
      connectTimeoutMillis: connectTimeoutMillis,
      readTimeoutMillis: readTimeoutMillis,
      writeTimeoutMillis: writeTimeoutMillis,
      protocol: protocol,
      handshake: handshake
    )
  }
  func toList() -> [Any?] {
    return [
      threadName,
      connectTimeoutMillis,
      readTimeoutMillis,
      writeTimeoutMillis,
      protocol,
      handshake?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Handshake {
  var protocolVersion: String? = nil
  var cipherSuite: String? = nil

  static func fromList(_ list: [Any?]) -> Handshake? {
    let protocolVersion: String? = nilOrValue(list[0])
    let cipherSuite: String? = nilOrValue(list[1])

    return Handshake(
      protocolVersion: protocolVersion,
      cipherSuite: cipherSuite
    )
  }
  func toList() -> [Any?] {
    return [
      protocolVersion,
      cipherSuite,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Request {
  var method: String
  var url: String
  var headers: [[String: String]?]? = nil
  var timestamp: Int64
  var contentType: String? = nil
  var body: String? = nil

  static func fromList(_ list: [Any?]) -> Request? {
    let method = list[0] as! String
    let url = list[1] as! String
    let headers: [[String: String]?]? = nilOrValue(list[2])
    let timestamp = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let contentType: String? = nilOrValue(list[4])
    let body: String? = nilOrValue(list[5])

    return Request(
      method: method,
      url: url,
      headers: headers,
      timestamp: timestamp,
      contentType: contentType,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      method,
      url,
      headers,
      timestamp,
      contentType,
      body,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Response {
  var headers: [[String: String]?]? = nil
  var statusCode: Int64? = nil
  var timestamp: Int64
  var gzippedLength: Int64? = nil
  var length: Int64? = nil
  var contentType: String? = nil
  var body: String? = nil

  static func fromList(_ list: [Any?]) -> Response? {
    let headers: [[String: String]?]? = nilOrValue(list[0])
    let statusCode: Int64? = isNullish(list[1]) ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    let timestamp = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let gzippedLength: Int64? = isNullish(list[3]) ? nil : (list[3] is Int64? ? list[3] as! Int64? : Int64(list[3] as! Int32))
    let length: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let contentType: String? = nilOrValue(list[5])
    let body: String? = nilOrValue(list[6])

    return Response(
      headers: headers,
      statusCode: statusCode,
      timestamp: timestamp,
      gzippedLength: gzippedLength,
      length: length,
      contentType: contentType,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      headers,
      statusCode,
      timestamp,
      gzippedLength,
      length,
      contentType,
      body,
    ]
  }
}

private class MADAssistantCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Handshake.fromList(self.readValue() as! [Any?])
      case 129:
        return NetworkCallLogModel.fromList(self.readValue() as! [Any?])
      case 130:
        return Options.fromList(self.readValue() as! [Any?])
      case 131:
        return Request.fromList(self.readValue() as! [Any?])
      case 132:
        return Response.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MADAssistantCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Handshake {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NetworkCallLogModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Options {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Request {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Response {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MADAssistantCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MADAssistantCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MADAssistantCodecWriter(data: data)
  }
}

class MADAssistantCodec: FlutterStandardMessageCodec {
  static let shared = MADAssistantCodec(readerWriter: MADAssistantCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MADAssistant {
  /// Initialise a new instance of MADAssistant
  func init(passphrase: String, completion: @escaping (Result<Void, Error>) -> Void)
  func connect(completion: @escaping (Result<Void, Error>) -> Void)
  func disconnect(completion: @escaping (Result<Void, Error>) -> Void)
  func getConnectionState(completion: @escaping (Result<ConnectionManagerState, Error>) -> Void)
  func startSession(completion: @escaping (Result<Void, Error>) -> Void)
  func endSession(completion: @escaping (Result<Void, Error>) -> Void)
  func hasActiveSession(completion: @escaping (Result<Bool, Error>) -> Void)
  func logCrashes(completion: @escaping (Result<Void, Error>) -> Void)
  func logNetworkCall(data: NetworkCallLogModel, completion: @escaping (Result<Void, Error>) -> Void)
  func logCrashReport(throwable: Any, message: String?, data: [AnyHashable: Any?]?, completion: @escaping (Result<Void, Error>) -> Void)
  func logAnalyticsEvent(destination: String, eventName: String, data: [AnyHashable: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  func logGenericLog(type: Int64, tag: String, message: String, data: [AnyHashable: Any?]?, completion: @escaping (Result<Void, Error>) -> Void)
  func logException(throwable: Any, message: String?, data: [String: dynamic]?, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MADAssistantSetup {
  /// The codec used by MADAssistant.
  static var codec: FlutterStandardMessageCodec { MADAssistantCodec.shared }
  /// Sets up an instance of `MADAssistant` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MADAssistant?) {
    /// Initialise a new instance of MADAssistant
    let initChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.init", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let passphraseArg = args[0] as! String
        api.init(passphrase: passphraseArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { _, reply in
        api.connect() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.disconnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { _, reply in
        api.disconnect() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let getConnectionStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.getConnectionState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConnectionStateChannel.setMessageHandler { _, reply in
        api.getConnectionState() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getConnectionStateChannel.setMessageHandler(nil)
    }
    let startSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.startSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startSessionChannel.setMessageHandler { _, reply in
        api.startSession() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startSessionChannel.setMessageHandler(nil)
    }
    let endSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.endSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      endSessionChannel.setMessageHandler { _, reply in
        api.endSession() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      endSessionChannel.setMessageHandler(nil)
    }
    let hasActiveSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.hasActiveSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasActiveSessionChannel.setMessageHandler { _, reply in
        api.hasActiveSession() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      hasActiveSessionChannel.setMessageHandler(nil)
    }
    let logCrashesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logCrashes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logCrashesChannel.setMessageHandler { _, reply in
        api.logCrashes() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logCrashesChannel.setMessageHandler(nil)
    }
    let logNetworkCallChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logNetworkCall", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logNetworkCallChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! NetworkCallLogModel
        api.logNetworkCall(data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logNetworkCallChannel.setMessageHandler(nil)
    }
    let logCrashReportChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logCrashReport", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logCrashReportChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let throwableArg = args[0]!
        let messageArg: String? = nilOrValue(args[1])
        let dataArg: [AnyHashable: Any?]? = nilOrValue(args[2])
        api.logCrashReport(throwable: throwableArg, message: messageArg, data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logCrashReportChannel.setMessageHandler(nil)
    }
    let logAnalyticsEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logAnalyticsEvent", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logAnalyticsEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let destinationArg = args[0] as! String
        let eventNameArg = args[1] as! String
        let dataArg = args[2] as! [AnyHashable: Any?]
        api.logAnalyticsEvent(destination: destinationArg, eventName: eventNameArg, data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logAnalyticsEventChannel.setMessageHandler(nil)
    }
    let logGenericLogChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logGenericLog", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logGenericLogChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let tagArg = args[1] as! String
        let messageArg = args[2] as! String
        let dataArg: [AnyHashable: Any?]? = nilOrValue(args[3])
        api.logGenericLog(type: typeArg, tag: tagArg, message: messageArg, data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logGenericLogChannel.setMessageHandler(nil)
    }
    let logExceptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistant.logException", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logExceptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let throwableArg = args[0]!
        let messageArg: String? = nilOrValue(args[1])
        let dataArg: [String: dynamic]? = nilOrValue(args[2])
        api.logException(throwable: throwableArg, message: messageArg, data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logExceptionChannel.setMessageHandler(nil)
    }
  }
}
private class MADAssistantCallbackCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Handshake.fromList(self.readValue() as! [Any?])
      case 129:
        return NetworkCallLogModel.fromList(self.readValue() as! [Any?])
      case 130:
        return Options.fromList(self.readValue() as! [Any?])
      case 131:
        return Request.fromList(self.readValue() as! [Any?])
      case 132:
        return Response.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MADAssistantCallbackCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Handshake {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NetworkCallLogModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Options {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Request {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Response {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MADAssistantCallbackCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MADAssistantCallbackCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MADAssistantCallbackCodecWriter(data: data)
  }
}

class MADAssistantCallbackCodec: FlutterStandardMessageCodec {
  static let shared = MADAssistantCallbackCodec(readerWriter: MADAssistantCallbackCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class MADAssistantCallback {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return MADAssistantCallbackCodec.shared
  }
  func onSessionStarted(sessionId sessionIdArg: Int64, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.onSessionStarted", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([sessionIdArg] as [Any?]) { _ in
      completion()
    }
  }
  func onSessionEnded(sessionId sessionIdArg: Int64, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.onSessionEnded", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([sessionIdArg] as [Any?]) { _ in
      completion()
    }
  }
  func onConnectionStateChanged(state stateArg: ConnectionManagerState, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.onConnectionStateChanged", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg.rawValue] as [Any?]) { _ in
      completion()
    }
  }
  func onDisconnected(code codeArg: Int64, message messageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.onDisconnected", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([codeArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func logInfo(tag tagArg: String, message messageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.logInfo", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func logVerbose(tag tagArg: String, message messageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.logVerbose", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func logDebug(tag tagArg: String, message messageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.logDebug", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func logWarn(tag tagArg: String, message messageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.logWarn", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func logError(throwable throwableArg: Any, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.madassistant.MADAssistantCallback.logError", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([throwableArg] as [Any?]) { _ in
      completion()
    }
  }
}
