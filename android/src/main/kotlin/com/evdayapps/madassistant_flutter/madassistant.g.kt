// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
    if (exception is FlutterError) {
        return listOf(
            exception.code,
            exception.message,
            exception.details
        )
    } else {
        return listOf(
            exception.javaClass.simpleName,
            exception.toString(),
            "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
        )
    }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

enum class ConnectionManagerState(val raw: Int) {
    NONE(0),
    CONNECTING(1),
    CONNECTED(2),
    DISCONNECTING(3),
    DISCONNECTED(4);

    companion object {
        fun ofRaw(raw: Int): ConnectionManagerState? {
            return values().firstOrNull { it.raw == raw }
        }
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NetworkCallLogModel(
    val options: Options? = null,
    val request: Request? = null,
    val response: Response? = null,
    val exception: ExceptionModel? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): NetworkCallLogModel {
            val options: Options? = (list[0] as List<Any?>?)?.let {
                Options.fromList(it)
            }
            val request: Request? = (list[1] as List<Any?>?)?.let {
                Request.fromList(it)
            }
            val response: Response? = (list[2] as List<Any?>?)?.let {
                Response.fromList(it)
            }
            val exception: ExceptionModel? = (list[3] as List<Any?>?)?.let {
                ExceptionModel.fromList(it)
            }
            return NetworkCallLogModel(options, request, response, exception)
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            options?.toList(),
            request?.toList(),
            response?.toList(),
            exception?.toList(),
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Options(
    val threadName: String? = null,
    val connectTimeoutMillis: Long? = null,
    val readTimeoutMillis: Long? = null,
    val writeTimeoutMillis: Long? = null,
    val protocol: String? = null,
    val handshake: Handshake? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): Options {
            val threadName = list[0] as String?
            val connectTimeoutMillis = list[1].let { if (it is Int) it.toLong() else it as Long? }
            val readTimeoutMillis = list[2].let { if (it is Int) it.toLong() else it as Long? }
            val writeTimeoutMillis = list[3].let { if (it is Int) it.toLong() else it as Long? }
            val protocol = list[4] as String?
            val handshake: Handshake? = (list[5] as List<Any?>?)?.let {
                Handshake.fromList(it)
            }
            return Options(
                threadName,
                connectTimeoutMillis,
                readTimeoutMillis,
                writeTimeoutMillis,
                protocol,
                handshake
            )
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            threadName,
            connectTimeoutMillis,
            readTimeoutMillis,
            writeTimeoutMillis,
            protocol,
            handshake?.toList(),
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Handshake(
    val protocolVersion: String? = null,
    val cipherSuite: String? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): Handshake {
            val protocolVersion = list[0] as String?
            val cipherSuite = list[1] as String?
            return Handshake(protocolVersion, cipherSuite)
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            protocolVersion,
            cipherSuite,
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Request(
    val method: String,
    val url: String,
    val headers: List<Map<String, String>?>? = null,
    val timestamp: Long,
    val contentType: String? = null,
    val body: String? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): Request {
            val method = list[0] as String
            val url = list[1] as String
            val headers = list[2] as List<Map<String, String>?>?
            val timestamp = list[3].let { if (it is Int) it.toLong() else it as Long }
            val contentType = list[4] as String?
            val body = list[5] as String?
            return Request(method, url, headers, timestamp, contentType, body)
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            method,
            url,
            headers,
            timestamp,
            contentType,
            body,
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Response(
    val headers: List<Map<String, String>?>? = null,
    val statusCode: Long? = null,
    val timestamp: Long,
    val gzippedLength: Long? = null,
    val length: Long? = null,
    val contentType: String? = null,
    val body: String? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): Response {
            val headers = list[0] as List<Map<String, String>?>?
            val statusCode = list[1].let { if (it is Int) it.toLong() else it as Long? }
            val timestamp = list[2].let { if (it is Int) it.toLong() else it as Long }
            val gzippedLength = list[3].let { if (it is Int) it.toLong() else it as Long? }
            val length = list[4].let { if (it is Int) it.toLong() else it as Long? }
            val contentType = list[5] as String?
            val body = list[6] as String?
            return Response(
                headers,
                statusCode,
                timestamp,
                gzippedLength,
                length,
                contentType,
                body
            )
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            headers,
            statusCode,
            timestamp,
            gzippedLength,
            length,
            contentType,
            body,
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ExceptionModel(
    val exceptionThreadName: String,
    val crash: Boolean,
    val type: String? = null,
    val message: String? = null,
    val throwableMessage: String? = null,
    val data: Map<String?, Any?>? = null,
    val stackTrace: List<ExceptionStacktraceLineModel?>,
    val threads: Map<String?, List<ExceptionStacktraceLineModel?>?>? = null

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): ExceptionModel {
            val exceptionThreadName = list[0] as String
            val crash = list[1] as Boolean
            val type = list[2] as String?
            val message = list[3] as String?
            val throwableMessage = list[4] as String?
            val data = list[5] as Map<String?, Any?>?
            val stackTrace = list[6] as List<ExceptionStacktraceLineModel?>
            val threads = list[7] as Map<String?, List<ExceptionStacktraceLineModel?>?>?
            return ExceptionModel(
                exceptionThreadName,
                crash,
                type,
                message,
                throwableMessage,
                data,
                stackTrace,
                threads
            )
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            exceptionThreadName,
            crash,
            type,
            message,
            throwableMessage,
            data,
            stackTrace,
            threads,
        )
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ExceptionStacktraceLineModel(
    val className: String,
    val fileName: String? = null,
    val nativeMethod: Boolean,
    val methodName: String,
    val lineNumber: Long

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): ExceptionStacktraceLineModel {
            val className = list[0] as String
            val fileName = list[1] as String?
            val nativeMethod = list[2] as Boolean
            val methodName = list[3] as String
            val lineNumber = list[4].let { if (it is Int) it.toLong() else it as Long }
            return ExceptionStacktraceLineModel(
                className,
                fileName,
                nativeMethod,
                methodName,
                lineNumber
            )
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            className,
            fileName,
            nativeMethod,
            methodName,
            lineNumber,
        )
    }
}

@Suppress("UNCHECKED_CAST")
private object MADAssistantCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return when (type) {
            128.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ExceptionModel.fromList(it)
                }
            }

            129.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ExceptionStacktraceLineModel.fromList(it)
                }
            }

            130.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Handshake.fromList(it)
                }
            }

            131.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    NetworkCallLogModel.fromList(it)
                }
            }

            132.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Options.fromList(it)
                }
            }

            133.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Request.fromList(it)
                }
            }

            134.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Response.fromList(it)
                }
            }

            else -> super.readValueOfType(type, buffer)
        }
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        when (value) {
            is ExceptionModel -> {
                stream.write(128)
                writeValue(stream, value.toList())
            }

            is ExceptionStacktraceLineModel -> {
                stream.write(129)
                writeValue(stream, value.toList())
            }

            is Handshake -> {
                stream.write(130)
                writeValue(stream, value.toList())
            }

            is NetworkCallLogModel -> {
                stream.write(131)
                writeValue(stream, value.toList())
            }

            is Options -> {
                stream.write(132)
                writeValue(stream, value.toList())
            }

            is Request -> {
                stream.write(133)
                writeValue(stream, value.toList())
            }

            is Response -> {
                stream.write(134)
                writeValue(stream, value.toList())
            }

            else -> super.writeValue(stream, value)
        }
    }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MADAssistant {
    /** Initialise a new instance of MADAssistant */
    fun init(passphrase: String, callback: (Result<Unit>) -> Unit)
    fun connect(callback: (Result<Unit>) -> Unit)
    fun disconnect(callback: (Result<Unit>) -> Unit)
    fun getConnectionState(callback: (Result<ConnectionManagerState>) -> Unit)
    fun startSession(callback: (Result<Unit>) -> Unit)
    fun endSession(callback: (Result<Unit>) -> Unit)
    fun hasActiveSession(callback: (Result<Boolean>) -> Unit)
    fun logCrashes(callback: (Result<Unit>) -> Unit)
    fun logNetworkCall(data: NetworkCallLogModel, callback: (Result<Unit>) -> Unit)
    fun logCrashReport(
        throwable: Any,
        message: String?,
        data: Map<Any, Any?>?,
        callback: (Result<Unit>) -> Unit
    )

    fun logAnalyticsEvent(
        destination: String,
        eventName: String,
        data: Map<Any, Any?>,
        callback: (Result<Unit>) -> Unit
    )

    fun logGenericLog(
        type: Long,
        tag: String,
        message: String,
        data: Map<Any, Any?>?,
        callback: (Result<Unit>) -> Unit
    )

    fun logException(
        throwable: Any,
        message: String?,
        data: Map<String, Any>?,
        callback: (Result<Unit>) -> Unit
    )

    companion object {
        /** The codec used by MADAssistant. */
        val codec: MessageCodec<Any?> by lazy {
            MADAssistantCodec
        }

        /** Sets up an instance of `MADAssistant` to handle messages through the `binaryMessenger`. */
        @Suppress("UNCHECKED_CAST")
        fun setUp(binaryMessenger: BinaryMessenger, api: MADAssistant?) {
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.init",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val passphraseArg = args[0] as String
                        api.init(passphraseArg) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.connect",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.connect() { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.disconnect",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.disconnect() { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.getConnectionState",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.getConnectionState() { result: Result<ConnectionManagerState> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                val data = result.getOrNull()
                                reply.reply(wrapResult(data!!.raw))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.startSession",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.startSession() { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.endSession",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.endSession() { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.hasActiveSession",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.hasActiveSession() { result: Result<Boolean> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                val data = result.getOrNull()
                                reply.reply(wrapResult(data))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logCrashes",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        api.logCrashes() { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logNetworkCall",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val dataArg = args[0] as NetworkCallLogModel
                        api.logNetworkCall(dataArg) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logCrashReport",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val throwableArg = args[0] as Any
                        val messageArg = args[1] as String?
                        val dataArg = args[2] as Map<Any, Any?>?
                        api.logCrashReport(
                            throwableArg,
                            messageArg,
                            dataArg
                        ) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logAnalyticsEvent",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val destinationArg = args[0] as String
                        val eventNameArg = args[1] as String
                        val dataArg = args[2] as Map<Any, Any?>
                        api.logAnalyticsEvent(
                            destinationArg,
                            eventNameArg,
                            dataArg
                        ) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logGenericLog",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val typeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
                        val tagArg = args[1] as String
                        val messageArg = args[2] as String
                        val dataArg = args[3] as Map<Any, Any?>?
                        api.logGenericLog(
                            typeArg,
                            tagArg,
                            messageArg,
                            dataArg
                        ) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.madassistant.MADAssistant.logException",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val throwableArg = args[0] as Any
                        val messageArg = args[1] as String?
                        val dataArg = args[2] as Map<String, Any>?
                        api.logException(
                            throwableArg,
                            messageArg,
                            dataArg
                        ) { result: Result<Unit> ->
                            val error = result.exceptionOrNull()
                            if (error != null) {
                                reply.reply(wrapError(error))
                            } else {
                                reply.reply(wrapResult(null))
                            }
                        }
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
        }
    }
}

@Suppress("UNCHECKED_CAST")
private object MADAssistantCallbackCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return when (type) {
            128.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ExceptionModel.fromList(it)
                }
            }

            129.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ExceptionStacktraceLineModel.fromList(it)
                }
            }

            130.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Handshake.fromList(it)
                }
            }

            131.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    NetworkCallLogModel.fromList(it)
                }
            }

            132.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Options.fromList(it)
                }
            }

            133.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Request.fromList(it)
                }
            }

            134.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    Response.fromList(it)
                }
            }

            else -> super.readValueOfType(type, buffer)
        }
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        when (value) {
            is ExceptionModel -> {
                stream.write(128)
                writeValue(stream, value.toList())
            }

            is ExceptionStacktraceLineModel -> {
                stream.write(129)
                writeValue(stream, value.toList())
            }

            is Handshake -> {
                stream.write(130)
                writeValue(stream, value.toList())
            }

            is NetworkCallLogModel -> {
                stream.write(131)
                writeValue(stream, value.toList())
            }

            is Options -> {
                stream.write(132)
                writeValue(stream, value.toList())
            }

            is Request -> {
                stream.write(133)
                writeValue(stream, value.toList())
            }

            is Response -> {
                stream.write(134)
                writeValue(stream, value.toList())
            }

            else -> super.writeValue(stream, value)
        }
    }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MADAssistantCallback(private val binaryMessenger: BinaryMessenger) {
    companion object {
        /** The codec used by MADAssistantCallback. */
        val codec: MessageCodec<Any?> by lazy {
            MADAssistantCallbackCodec
        }
    }

    fun onSessionStarted(sessionIdArg: Long, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.onSessionStarted",
            codec
        )
        channel.send(listOf(sessionIdArg)) {
            callback()
        }
    }

    fun onSessionEnded(sessionIdArg: Long, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.onSessionEnded",
            codec
        )
        channel.send(listOf(sessionIdArg)) {
            callback()
        }
    }

    fun onConnectionStateChanged(stateArg: ConnectionManagerState, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.onConnectionStateChanged",
            codec
        )
        channel.send(listOf(stateArg.raw)) {
            callback()
        }
    }

    fun onDisconnected(codeArg: Long, messageArg: String, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.onDisconnected",
            codec
        )
        channel.send(listOf(codeArg, messageArg)) {
            callback()
        }
    }

    fun logInfo(tagArg: String, messageArg: String, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.logInfo",
            codec
        )
        channel.send(listOf(tagArg, messageArg)) {
            callback()
        }
    }

    fun logVerbose(tagArg: String, messageArg: String, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.logVerbose",
            codec
        )
        channel.send(listOf(tagArg, messageArg)) {
            callback()
        }
    }

    fun logDebug(tagArg: String, messageArg: String, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.logDebug",
            codec
        )
        channel.send(listOf(tagArg, messageArg)) {
            callback()
        }
    }

    fun logWarn(tagArg: String, messageArg: String, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.logWarn",
            codec
        )
        channel.send(listOf(tagArg, messageArg)) {
            callback()
        }
    }

    fun logError(throwableArg: Any, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.madassistant.MADAssistantCallback.logError",
            codec
        )
        channel.send(listOf(throwableArg)) {
            callback()
        }
    }
}
